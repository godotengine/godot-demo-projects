[gd_scene load_steps=28 format=3 uid="uid://bcmepm05qldy5"]

[ext_resource type="Texture2D" uid="uid://bc3n2sen32mqx" path="res://sky.png" id="1_0n6b1"]
[ext_resource type="PackedScene" uid="uid://dfyswwfb8j6iv" path="res://player.tscn" id="2_cwuyg"]
[ext_resource type="PackedScene" uid="uid://cosjr7whfc78d" path="res://lamp_post.tscn" id="3_rtj1w"]
[ext_resource type="Script" path="res://water.gd" id="3_ww5ac"]
[ext_resource type="PackedScene" uid="uid://cewhn5k3503lu" path="res://enemy.tscn" id="4_errvf"]
[ext_resource type="CompressedTexture3D" uid="uid://qgj3lwwrrgj" path="res://level.GPUParticlesCollisionSDF3D_data.exr" id="5_myd3n"]

[sub_resource type="PanoramaSkyMaterial" id="PanoramaSkyMaterial_33kw8"]
panorama = ExtResource("1_0n6b1")
filter = false

[sub_resource type="Sky" id="Sky_xd4ok"]
sky_material = SubResource("PanoramaSkyMaterial_33kw8")

[sub_resource type="Environment" id="Environment_b1dvs"]
background_mode = 2
sky = SubResource("Sky_xd4ok")
ambient_light_color = Color(0.25098, 0.501961, 1, 1)
ambient_light_sky_contribution = 0.98
tonemap_mode = 3
tonemap_white = 6.0
fog_enabled = true
fog_light_color = Color(0.117647, 0.156863, 0.196078, 1)
fog_density = 0.006
fog_sky_affect = 0.0

[sub_resource type="FastNoiseLite" id="FastNoiseLite_vemq1"]
fractal_type = 2
fractal_lacunarity = 16.782
fractal_gain = 1.4

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_nepn7"]
seamless = true
noise = SubResource("FastNoiseLite_vemq1")

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_w2v74"]
seamless = true
as_normal_map = true
bump_strength = 0.1
noise = SubResource("FastNoiseLite_vemq1")

[sub_resource type="Gradient" id="Gradient_soa80"]
colors = PackedColorArray(1, 1, 1, 1, 0, 0, 0, 1)

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_rmhqn"]
seamless = true
color_ramp = SubResource("Gradient_soa80")
noise = SubResource("FastNoiseLite_vemq1")

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_sds3a"]
albedo_texture = SubResource("NoiseTexture2D_nepn7")
roughness = 0.5
roughness_texture = SubResource("NoiseTexture2D_rmhqn")
normal_enabled = true
normal_texture = SubResource("NoiseTexture2D_w2v74")
uv1_scale = Vector3(0.063, 0.063, 0.063)
uv1_triplanar = true
uv1_triplanar_sharpness = 15.455
texture_filter = 4

[sub_resource type="PlaneMesh" id="PlaneMesh_olnn8"]
size = Vector2(15, 30)
subdivide_width = 16
subdivide_depth = 16

[sub_resource type="Shader" id="Shader_7u7jo"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.0.beta's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_disabled,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_nearest_mipmap_anisotropic,repeat_enable;
uniform float proximity_fade_distance;
uniform float distance_fade_min;
uniform float distance_fade_max;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_nearest_mipmap_anisotropic,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_nearest_mipmap_anisotropic,repeat_enable;
uniform float specular;
uniform float metallic;
uniform sampler2D texture_normal : hint_roughness_normal,filter_nearest_mipmap_anisotropic,repeat_enable;
uniform float normal_scale : hint_range(-16,16);
varying vec3 uv1_triplanar_pos;
uniform float uv1_blend_sharpness;
varying vec3 uv1_power_normal;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

const float WAVE_AMPLITUDE = 0.125;
const float WAVE_SPEED = 1.3;


void vertex() {
	TANGENT = vec3(0.0,0.0,-1.0) * abs(NORMAL.x);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.y);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.z);
	TANGENT = normalize(TANGENT);
	BINORMAL = vec3(0.0,1.0,0.0) * abs(NORMAL.x);
	BINORMAL+= vec3(0.0,0.0,-1.0) * abs(NORMAL.y);
	BINORMAL+= vec3(0.0,1.0,0.0) * abs(NORMAL.z);
	BINORMAL = normalize(BINORMAL);
	uv1_power_normal=pow(abs(NORMAL),vec3(uv1_blend_sharpness));
	uv1_triplanar_pos = VERTEX * uv1_scale + uv1_offset;
	uv1_power_normal/=dot(uv1_power_normal,vec3(1.0));
	uv1_triplanar_pos *= vec3(1.0,-1.0, 1.0);
	
	// Make the surface wave.
 	VERTEX.y = -WAVE_AMPLITUDE + (sin(VERTEX.x + TIME * WAVE_SPEED) + sin(VERTEX.z * 2.0 + TIME * WAVE_SPEED)) * WAVE_AMPLITUDE;
}


vec4 triplanar_texture(sampler2D p_sampler,vec3 p_weights,vec3 p_triplanar_pos) {
	vec4 samp=vec4(0.0);
	samp+= texture(p_sampler,p_triplanar_pos.xy) * p_weights.z;
	samp+= texture(p_sampler,p_triplanar_pos.xz) * p_weights.y;
	samp+= texture(p_sampler,p_triplanar_pos.zy * vec2(-1.0,1.0)) * p_weights.x;
	return samp;
}


void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo,uv1_power_normal,uv1_triplanar_pos);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(triplanar_texture(texture_metallic,uv1_power_normal,uv1_triplanar_pos),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(triplanar_texture(texture_roughness,uv1_power_normal,uv1_triplanar_pos),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	NORMAL_MAP = triplanar_texture(texture_normal,uv1_power_normal,uv1_triplanar_pos).rgb;
	NORMAL_MAP_DEPTH = normal_scale;
	ALPHA *= albedo.a * albedo_tex.a;
	float depth_tex = textureLod(DEPTH_TEXTURE,SCREEN_UV,0.0).r;
	vec4 world_pos = INV_PROJECTION_MATRIX * vec4(SCREEN_UV*2.0-1.0,depth_tex,1.0);
	world_pos.xyz/=world_pos.w;
	ALPHA*=clamp(1.0-smoothstep(world_pos.z+proximity_fade_distance,world_pos.z,VERTEX.z),0.0,1.0);
	ALPHA *= clamp(smoothstep(distance_fade_min, distance_fade_max, length(VERTEX)), 0.0, 1.0);
}
"

[sub_resource type="Gradient" id="Gradient_vg3fo"]
interpolation_mode = 2
offsets = PackedFloat32Array(0, 0.987013)
colors = PackedColorArray(0.555, 0.555, 0.74, 0.490196, 0.75, 1, 1, 0.823529)

[sub_resource type="FastNoiseLite" id="FastNoiseLite_e2g8a"]
noise_type = 2
fractal_type = 0
domain_warp_enabled = true
domain_warp_type = 2

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_ftpiw"]
width = 256
height = 256
seamless = true
seamless_blend_skirt = 1.0
color_ramp = SubResource("Gradient_vg3fo")
noise = SubResource("FastNoiseLite_e2g8a")

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_prikk"]
width = 256
height = 256
seamless = true
seamless_blend_skirt = 1.0
as_normal_map = true
bump_strength = 0.2
noise = SubResource("FastNoiseLite_e2g8a")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_fsido"]
render_priority = 0
shader = SubResource("Shader_7u7jo")
shader_parameter/albedo = Color(0.862745, 0.862745, 0.862745, 1)
shader_parameter/proximity_fade_distance = 0.5
shader_parameter/distance_fade_min = 0.0
shader_parameter/distance_fade_max = 1.0
shader_parameter/point_size = 1.0
shader_parameter/roughness = 0.0
shader_parameter/metallic_texture_channel = Plane(1, 0, 0, 0)
shader_parameter/specular = 1.0
shader_parameter/metallic = 0.0
shader_parameter/normal_scale = 1.0
shader_parameter/uv1_blend_sharpness = 1.0
shader_parameter/uv1_scale = Vector3(0.125, 0.125, 0.125)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/texture_albedo = SubResource("NoiseTexture2D_ftpiw")
shader_parameter/texture_normal = SubResource("NoiseTexture2D_prikk")

[sub_resource type="BoxMesh" id="BoxMesh_dflow"]
lightmap_size_hint = Vector2i(229, 216)
size = Vector3(15, 6, 30)

[sub_resource type="BoxShape3D" id="BoxShape3D_04k8c"]
size = Vector3(15, 6, 30)

[sub_resource type="Animation" id="Animation_as77u"]
resource_name = "water_surface"
length = 60.0
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Surface:surface_material_override/0:uv1_offset")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 33, 60),
"transitions": PackedFloat32Array(-2, -2, -2),
"update": 0,
"values": [Vector3(0, 0, 0), Vector3(2, 1, 1), Vector3(3, 0, -1)]
}

[sub_resource type="Animation" id="Animation_2y52n"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Surface:surface_material_override/0:uv1_offset")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector3(0, 0, 0)]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_vu6de"]
_data = {
"RESET": SubResource("Animation_2y52n"),
"water_surface": SubResource("Animation_as77u")
}

[node name="Node3D" type="Node3D"]

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_b1dvs")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(0.236491, -0.970858, -0.0388079, 0.265457, 0.0261379, 0.963768, -0.934668, -0.238224, 0.263902, 2.61962, -0.479115, -1.60764)
light_color = Color(0.308, 0.369333, 0.4, 1)
light_energy = 0.5
light_cull_mask = 4294967291
shadow_enabled = true
shadow_bias = 0.04
directional_shadow_mode = 0
directional_shadow_fade_start = 1.0
directional_shadow_max_distance = 75.0

[node name="Player" parent="." instance=ExtResource("2_cwuyg")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -16, -8.5, 43)

[node name="Main" type="CSGBox3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -21, 0)
use_collision = true
size = Vector3(100, 40, 100)
material = SubResource("StandardMaterial3D_sds3a")

[node name="Inner" type="CSGBox3D" parent="Main"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 16, 0)
operation = 2
use_collision = true
size = Vector3(99, 9, 99)
material = SubResource("StandardMaterial3D_sds3a")

[node name="Pool" type="CSGPolygon3D" parent="Main"]
transform = Transform3D(-4.2222e-08, -1.49012e-08, 1, -1.13133e-08, 1, -2.98023e-08, -1, -1.13133e-08, -4.2222e-08, 38.7204, 10.3939, 25.6394)
operation = 2
polygon = PackedVector2Array(12, 2.75, 12, 1.75, -11.75, -5.25, -15.75, -5.25, -15.75, 2.75)
depth = 15.0
material = SubResource("StandardMaterial3D_sds3a")

[node name="Water" type="Area3D" parent="Main"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 31.25, 11, 27.25)
gravity_space_override = 3
gravity = 6.0
linear_damp_space_override = 1
linear_damp = 0.3
script = ExtResource("3_ww5ac")

[node name="Surface" type="MeshInstance3D" parent="Main/Water"]
layers = 8
mesh = SubResource("PlaneMesh_olnn8")
surface_material_override/0 = SubResource("ShaderMaterial_fsido")

[node name="ShadowBlock" type="MeshInstance3D" parent="Main/Water"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -3.25, 0)
layers = 8
cast_shadow = 3
mesh = SubResource("BoxMesh_dflow")

[node name="CollisionShape3D" type="CollisionShape3D" parent="Main/Water"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -3, 0)
shape = SubResource("BoxShape3D_04k8c")

[node name="GPUParticlesCollisionBox3D" type="GPUParticlesCollisionBox3D" parent="Main/Water"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -3, 0)
cull_mask = 4294967293
extents = Vector3(7.5, 3, 15)

[node name="AnimationPlayer" type="AnimationPlayer" parent="Main/Water"]
autoplay = "water_surface"
libraries = {
"": SubResource("AnimationLibrary_vu6de")
}

[node name="Building" type="CSGBox3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 4, 3, 36)
use_collision = true
size = Vector3(16, 25, 16)
material = SubResource("StandardMaterial3D_sds3a")

[node name="Building2" type="CSGBox3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 5, -1, 19)
use_collision = true
size = Vector3(16, 25, 16)
material = SubResource("StandardMaterial3D_sds3a")

[node name="Building3" type="CSGBox3D" parent="."]
transform = Transform3D(0.995645, 0, 0.0932221, 0, 1, 0, -0.0932221, 0, 0.995645, -36.2054, 3, 36.0096)
use_collision = true
size = Vector3(16, 25, 16)
material = SubResource("StandardMaterial3D_sds3a")

[node name="Building4" type="CSGBox3D" parent="."]
transform = Transform3D(0.995645, 0, 0.0932221, 0, 1, 0, -0.0932221, 0, 0.995645, -36.7946, -7, 18.9904)
use_collision = true
size = Vector3(16, 25, 16)
material = SubResource("StandardMaterial3D_sds3a")

[node name="Slope" type="CSGBox3D" parent="."]
transform = Transform3D(-4.2222e-08, 1.13133e-08, 1, 0.258819, 0.965926, 0, -0.965926, 0.258819, -4.37114e-08, -15.8, -9.5, 17)
use_collision = true
size = Vector3(4, 1, 16)
material = SubResource("StandardMaterial3D_sds3a")

[node name="Slope2" type="CSGBox3D" parent="."]
transform = Transform3D(-4.2222e-08, 1.13133e-08, 1, 0.258819, 0.965926, -8.88178e-16, -0.965926, 0.258819, -4.37114e-08, -15.8, -9, -13.25)
use_collision = true
size = Vector3(8, 1, 4)
material = SubResource("StandardMaterial3D_sds3a")

[node name="Slope3" type="CSGBox3D" parent="."]
transform = Transform3D(-4.2222e-08, 1.13133e-08, 1, 0.5, 0.866026, 1.13133e-08, -0.866026, 0.5, -4.2222e-08, -11.55, -9, -13.25)
use_collision = true
size = Vector3(8, 1, 4)
material = SubResource("StandardMaterial3D_sds3a")

[node name="Slope4" type="CSGBox3D" parent="."]
transform = Transform3D(-4.2222e-08, 1.13133e-08, 1, 0.707107, 0.707107, 2.18557e-08, -0.707107, 0.707107, -3.78552e-08, -7.3, -9, -13.25)
use_collision = true
size = Vector3(8, 1, 4)
material = SubResource("StandardMaterial3D_sds3a")

[node name="Slope5" type="CSGBox3D" parent="."]
transform = Transform3D(-4.2222e-08, 1.13133e-08, 1, 0.866025, 0.5, 3.09086e-08, -0.5, 0.866025, -3.09086e-08, -3.05, -9, -13.25)
use_collision = true
size = Vector3(8, 1, 4)
material = SubResource("StandardMaterial3D_sds3a")

[node name="Slope6" type="CSGBox3D" parent="."]
transform = Transform3D(-4.2222e-08, 1.13133e-08, 1, 0.965926, 0.258819, 3.78552e-08, -0.258819, 0.965926, -2.18557e-08, 1.2, -9, -13.25)
use_collision = true
size = Vector3(8, 1, 4)
material = SubResource("StandardMaterial3D_sds3a")

[node name="Slope7" type="CSGBox3D" parent="."]
transform = Transform3D(-4.2222e-08, 1.13133e-08, 1, 0.965926, -0.258819, 4.37114e-08, 0.258819, 0.965926, 2.66454e-15, -37.05, -6.75, -13.25)
use_collision = true
size = Vector3(8, 1, 4)
material = SubResource("StandardMaterial3D_sds3a")

[node name="Slope8" type="CSGBox3D" parent="."]
transform = Transform3D(-4.2222e-08, 1.13133e-08, 1, 0.866026, -0.5, 4.2222e-08, 0.5, 0.866026, 1.13133e-08, -32.8, -6.75, -13.25)
use_collision = true
size = Vector3(8, 1, 4)
material = SubResource("StandardMaterial3D_sds3a")

[node name="Slope9" type="CSGBox3D" parent="."]
transform = Transform3D(-4.2222e-08, 1.13133e-08, 1, 0.707107, -0.707107, 3.78552e-08, 0.707107, 0.707107, 2.18557e-08, -28.55, -6.75, -13.25)
use_collision = true
size = Vector3(8, 1, 4)
material = SubResource("StandardMaterial3D_sds3a")

[node name="Slope10" type="CSGBox3D" parent="."]
transform = Transform3D(-4.2222e-08, 1.13133e-08, 1, 0.5, -0.866025, 3.09086e-08, 0.866025, 0.5, 3.09086e-08, -24.3, -6.75, -13.25)
use_collision = true
size = Vector3(8, 1, 4)
material = SubResource("StandardMaterial3D_sds3a")

[node name="Slope11" type="CSGBox3D" parent="."]
transform = Transform3D(-4.2222e-08, 1.13133e-08, 1, 0.258819, -0.965926, 2.18557e-08, 0.965926, 0.258819, 3.78552e-08, -20.05, -6.75, -13.25)
use_collision = true
size = Vector3(8, 1, 4)
material = SubResource("StandardMaterial3D_sds3a")

[node name="Staircase" type="CSGPolygon3D" parent="."]
transform = Transform3D(-4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, -17.5, -9.25, 11.75)
use_collision = true
polygon = PackedVector2Array(0.5, 0, 0.5, 0.25, 1, 0.25, 1, 0.5, 1.5, 0.5, 1.5, 0.75, 2, 0.75, 2, 1, 2.5, 1, 2.5, 1.25, 3, 1.25, 3, 1.5, 3.5, 1.5, 3.5, 1.75, 4, 1.75, 4, 2, 5, 2, 5, -0.25, 0, -0.25)
depth = 4.0
material = SubResource("StandardMaterial3D_sds3a")

[node name="Staircase2" type="CSGPolygon3D" parent="."]
transform = Transform3D(0.258819, 0, 0.965926, 0, 1, 0, -0.965926, 0, 0.258819, -22.825, -9.25, 11.6)
use_collision = true
polygon = PackedVector2Array(0.5, 0, 0.5, 0.25, 1, 0.25, 1, 0.5, 1.5, 0.5, 1.5, 0.75, 2, 0.75, 2, 1, 2.5, 1, 2.5, 1.25, 3, 1.25, 3, 1.5, 3.5, 1.5, 3.5, 1.75, 4, 1.75, 4, 2, 5, 2, 5, -0.25, 0, -0.25)
material = SubResource("StandardMaterial3D_sds3a")

[node name="LampPost" parent="." instance=ExtResource("3_rtj1w")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -8, -9.5, 24)

[node name="LampPost2" parent="." instance=ExtResource("3_rtj1w")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -8, -9.5, 40)

[node name="LampPost3" parent="." instance=ExtResource("3_rtj1w")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -24, -9.5, 24)

[node name="LampPost4" parent="." instance=ExtResource("3_rtj1w")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -24, -9.5, 40)

[node name="Enemies" type="Node3D" parent="."]

[node name="Enemy" parent="Enemies" instance=ExtResource("4_errvf")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -11.5, -8.5, 21)

[node name="Enemy2" parent="Enemies" instance=ExtResource("4_errvf")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -14.5, -8.5, 21)

[node name="Enemy3" parent="Enemies" instance=ExtResource("4_errvf")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -17.5, -8.5, 21)

[node name="Enemy4" parent="Enemies" instance=ExtResource("4_errvf")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -20.5, -8.5, 21)

[node name="Enemy5" parent="Enemies" instance=ExtResource("4_errvf")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -43.5, -8.5, -28)

[node name="Enemy6" parent="Enemies" instance=ExtResource("4_errvf")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -46.5, -8.5, -28)

[node name="Enemy7" parent="Enemies" instance=ExtResource("4_errvf")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 25.5, -8.5, -19)

[node name="Enemy8" parent="Enemies" instance=ExtResource("4_errvf")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 22.5, -8.5, -19)

[node name="GPUParticlesCollisionSDF3D" type="GPUParticlesCollisionSDF3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.5, 0)
extents = Vector3(51, 17, 51)
resolution = 3
bake_mask = 4294967281
texture = ExtResource("5_myd3n")

[connection signal="body_entered" from="Main/Water" to="Main/Water" method="_on_body_entered"]
[connection signal="body_exited" from="Main/Water" to="Main/Water" method="_on_body_exited"]
